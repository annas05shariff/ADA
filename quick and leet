#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[low];
    int i = low;
    int j = high;

    while (i < j) {
        while (arr[i] <= pivot && i <= high - 1) {
            i++;
        }
        while (arr[j] > pivot && j >= low) {
            j--;
        }
        if (i < j) {
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[low], &arr[j]);
    return j;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int size;

    printf("Enter the number of elements: ");
    scanf("%d", &size);

    int *arr = (int *)malloc(size * sizeof(int));

    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    srand(time(NULL));
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 1000;
    }

    printf("Original array: ");
    printArray(arr, size);

    clock_t start = clock();

    quickSort(arr, 0, size - 1);

    clock_t end = clock();

    printf("Sorted array using QuickSort: ");
    printArray(arr, size);

    double time_taken = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken for sorting: %f seconds\n", time_taken);

    free(arr);

    return 0;
}

leet:

#include <stdio.h>
#include <stdlib.h>


int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}


void threeSum(int* nums, int numsSize) {
    
    qsort(nums, numsSize, sizeof(int), compare);
    
    printf("Unique triplets that sum to zero:\n");
    
    for (int i = 0; i < numsSize - 2; i++) {
        
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }

        int left = i + 1, right = numsSize - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            if (sum == 0) {
                printf("[ %d, %d, %d ]\n", nums[i], nums[left], nums[right]);
                left++;
                right--;

                
                while (left < right && nums[left] == nums[left - 1]) left++;
                while (left < right && nums[right] == nums[right + 1]) right--;
            } 
            else if (sum < 0) {
                left++; 
            } 
            else {
                right--; 
            }
        }
    }
}


int main() {
    int nums[] = {-1, 0, 1, 2, -1, -4};
    int size = sizeof(nums) 

    threeSum(nums, size);
    return 0;
}

