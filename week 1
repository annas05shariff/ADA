topo sort
#include <stdio.h>
#include <stdlib.h>
void topologicalSort(int graph[20][20], int V) {
    int in_degree[V];
    for (int i = 0; i < V; i++) {
        in_degree[i] = 0;
}
for(int i = 0; i < V; i++) {
    for (int j = 0; j < V; j++) {
        if (graph[i][j] == 1) {
            in_degree[j]++;
    }
}
}
int queue[20], front = 0, rear = 0;
    for (int i = 0; i < V; i++) {
        if (in_degree[i] == 0) {
            queue[rear++] = i;
}
}
int topo_order[20], index = 0;
    while (front != rear) {
        int n = queue[front++];
        topo_order[index++] = n;

        for (int i = 0; i < V; i++) {
            if (graph[n][i] == 1) {
                in_degree[i]--;
                if (in_degree[i] == 0) {
                    queue[rear++] = i;
}
}
}
}
   if (index == V) {
        for (int i = 0; i < V; i++) {
            printf("%d is the topological order ", topo_order[i]);
    }
}
else {
printf("Cycle detected\n");
}
}
void main(){
int i,j,graph[20][20],V;
printf("Enter the number of vertices ");
scanf("%d",&V);
for (i=0;i<V;i++){
    for(j=0;j<V;j++){
        printf("enter the %d %dth elements ",i,j);
        scanf("%d",&graph[i][j]);
    }
}
topologicalSort(graph,V);
}

leet 
#include <stdbool.h>
#include <stdlib.h>

bool dfs(int course, int** adjList, int* visited, int numCourses) {
    if (visited[course] == 1) {
        return false;
    }
    if (visited[course] == 2) {
        return true;
    }
    visited[course] = 1;
    for (int i = 0; i < numCourses; i++) {
        if (adjList[course][i] == 1) {
            if (!dfs(i, adjList, visited, numCourses)) {
                return false;
            }
        }
    }
    visited[course] = 2;
    return true;
}

bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {
    int** adjList = (int**)malloc(numCourses * sizeof(int*));
    for (int i = 0; i < numCourses; i++) {
        adjList[i] = (int*)malloc(numCourses * sizeof(int));
        for (int j = 0; j < numCourses; j++) {
            adjList[i][j] = 0;
        }
    }

    for (int i = 0; i < prerequisitesSize; i++) {
        int course = prerequisites[i][0];
        int pre = prerequisites[i][1];
        adjList[course][pre] = 1;
    }

    int* visited = (int*)malloc(numCourses * sizeof(int));
    for (int i = 0; i < numCourses; i++) {
        visited[i] = 0;
    }

    for (int i = 0; i < numCourses; i++) {
        if (visited[i] == 0) {
            if (!dfs(i, adjList, visited, numCourses)) {
                free(visited);
                for (int i = 0; i < numCourses; i++) {
                    free(adjList[i]);
                }
                free(adjList);
                return false;
            }
        }
    }

    free(visited);
    for (int i = 0; i < numCourses; i++) {
        free(adjList[i]);
    }
    free(adjList);
    return true;
}


